package io;

import com.itextpdf.text.*;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

public class FirstPdf {
    private static String FILE = "/home/muhammed/Output/firstPdf.pdf";
    private static Font catFont = new Font(FontFamily.TIMES_ROMAN,18,Font.BOLD);
    private static Font redFont = new Font(FontFamily.TIMES_ROMAN,12,Font.NORMAL);
    private static Font subFont = new Font(FontFamily.TIMES_ROMAN,16,Font.BOLD);
    private static Font smallFont = new Font(FontFamily.TIMES_ROMAN,12,Font.BOLD);

    public static void main(String[] args) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            document.setPageSize(PageSize.A4);

            addMetaData(document);
            adddTitlePage(document);
            addContent(document);

            document.close();

        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    private static void addMetaData(Document document){
        document.addTitle("My Transcript");
        document.addSubject("Utg Official");
        document.addKeywords("Java,Pdf,iText");
        document.addAuthor("W Drammeh");
        document.addCreator("Waks D");

    }

    private static void adddTitlePage (Document document) throws DocumentException {
        Paragraph preface = new Paragraph();

        addEmptyLine(preface,1);

        preface.add(new Paragraph("Title of the document",catFont));

        addEmptyLine(preface,1);

        preface.add(new Paragraph(
                "Java report generated by: " +
                        System.getProperty("user.name") + ", " + new Date(),smallFont
        ));

        addEmptyLine(preface,3);

        preface.add(new Paragraph("This Pdf document describes something which is very important ",smallFont));

        addEmptyLine(preface,8);

        preface.add(new Paragraph("This Dashoard is a preliminary version and no subject to your license agreement or your other agreement with Dashboard ;-",redFont));

        document.add(preface);
        document.newPage();

    }

    private static void addContent(Document document) throws DocumentException{
        Image image = null;
        try {
            image = new Jpeg(new File("Logo_of_UTG.gif").toURI().toURL());
        } catch (IOException e) {
            e.printStackTrace();
        }
//        image.setWidthPercentage(100);
//        document.add(image);
        final Paragraph pi = new Paragraph();

        pi.setAlignment(Element.ALIGN_RIGHT);
        pi.setFont(new Font(FontFamily.TIMES_ROMAN,20,Font.BOLD));
        image.setAlignment(Element.ALIGN_LEFT);
        pi.add(image);
//        Collections.addAll(pi,"THE UNIVERSITY OF THE GAMBIA","                     STUDENT ACADEMIC RECORDS ",image);
        pi.add(new Phrase("THE UNIVERSITY OF THE GAMBIA"));
        document.add(pi);

        Anchor anchor = new Anchor("First Chapter",catFont);
        anchor.setName("First Chapter");

        Chapter catPart = new Chapter(new Paragraph(anchor),1);

        Paragraph subPara = new Paragraph("Subcatagory 1",subFont);

        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("Hello"));

        subPara = new Paragraph("Subcatagory 2",subFont);

        subCatPart = catPart.addSection(subPara);

//
        final Paragraph paragraph1 = new Paragraph("This is a left-aligned text");
        paragraph1.setAlignment(Element.ALIGN_LEFT);

        final Paragraph paragraph2 = new Paragraph("This is a centered text");
        paragraph2.setAlignment(Element.ALIGN_CENTER);

        final Paragraph paragraph3 = new Paragraph("This was aligned right with indentation.");
        paragraph3.setAlignment(Element.ALIGN_RIGHT);
        paragraph3.setIndentationRight(50);
//
        subCatPart.add(paragraph1);
        subCatPart.add(paragraph2);
        subCatPart.add(paragraph3);

        createList(subCatPart);

        Paragraph paragraph = new Paragraph();

        addEmptyLine(paragraph,5);

        subCatPart.add(paragraph);

        createTable(subCatPart);

        document.add(catPart);

        anchor = new Anchor("Second Chapter",catFont);

        anchor.setName("Second Chapter");

        catPart = new Chapter(new Paragraph(anchor),1);

        subPara = new Paragraph("Subcatagory",subFont);

        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important mesage"));

        document.add(catPart);
    }

    private static void createTable(Section subCartPart) throws BadElementException{
        PdfPTable table = new PdfPTable(3);

        PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 2"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Table Header 3"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        table.setHeaderRows(1);
        table.addCell("1.0");
        table.addCell("1.1");
        table.addCell("1.2");
        table.addCell("2.1");
        table.addCell("2.3");
        table.addCell("2.3");

        subCartPart.add(table);

    }

    private static void createList(Section subCartPart){
        List list = new List(true,false,10);
        list.add(new ListItem("First Point"));
        list.add(new ListItem("Second Point"));
        list.add(new ListItem("Third Point"));

        subCartPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph,int number){
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
